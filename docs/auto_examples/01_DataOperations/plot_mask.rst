

.. _sphx_glr_auto_examples_01_DataOperations_plot_mask.py:

 
Masking Example
===============

This tutorial illustrates methods to help with masking data.



Load Data
---------

First, let's load the pain data for this example.



.. code-block:: python


    from nltools.datasets import fetch_pain

    data = fetch_pain()







Apply_Mask
----------

Spherical masks can be created using the create_sphere function.
It requires specifying a center voxel and the radius of the sphere.



.. code-block:: python


    from nltools.mask import create_sphere

    mask = create_sphere([0, 0, 0], radius=30)
    masked_data = data.apply_mask(mask)
    masked_data.mean().plot()




.. image:: /auto_examples/01_DataOperations/images/sphx_glr_plot_mask_001.png
    :align: center




Extract Mean Within ROI
-----------------------

We can easily calculate the mean within an ROI for each image within a 
Brain_Data() instance using the extract_roi() method. 



.. code-block:: python


    import matplotlib.pyplot as plt

    mean = data.extract_roi(mask)
    plt.plot(mean)




.. image:: /auto_examples/01_DataOperations/images/sphx_glr_plot_mask_002.png
    :align: center




Expand and Contract ROIs
------------------------

Some masks have many ROIs indicated by a unique ID.  It is possible to
expand these masks into separate ROIs and also collapse them into a single
image again.  Here we will demonstrate on a k=50 parcellation hosted on
http://neurovault.org.



.. code-block:: python


    from nltools.mask import expand_mask, collapse_mask
    from nltools.data import Brain_Data

    mask = Brain_Data('http://neurovault.org/media/images/2099/Neurosynth%20Parcellation_0.nii.gz')
    mask.plot()




.. image:: /auto_examples/01_DataOperations/images/sphx_glr_plot_mask_003.png
    :align: center




We can expand this mask into 50 separate regions



.. code-block:: python


    mask_x = expand_mask(mask)
    mask_x.plot()




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/01_DataOperations/images/sphx_glr_plot_mask_004.png
            :scale: 47

    *

      .. image:: /auto_examples/01_DataOperations/images/sphx_glr_plot_mask_005.png
            :scale: 47

    *

      .. image:: /auto_examples/01_DataOperations/images/sphx_glr_plot_mask_006.png
            :scale: 47

    *

      .. image:: /auto_examples/01_DataOperations/images/sphx_glr_plot_mask_007.png
            :scale: 47

    *

      .. image:: /auto_examples/01_DataOperations/images/sphx_glr_plot_mask_008.png
            :scale: 47




We can collapse these 50 separate regions as unique values in a single image 



.. code-block:: python


    mask_c = collapse_mask(mask_x)
    mask_c.plot()




.. image:: /auto_examples/01_DataOperations/images/sphx_glr_plot_mask_009.png
    :align: center




Threshold and Regions
---------------------

Images can be thresholded using an arbitrary cutoff or a percentile using the 
threshold method.  Here we calculate the mean of the high pain images and
threshold using the 95 percentile.



.. code-block:: python


    import numpy as np

    high = data[np.where(data.X['PainLevel']==3)[0]]
    high.mean().threshold(threshold='95%').plot()




.. image:: /auto_examples/01_DataOperations/images/sphx_glr_plot_mask_010.png
    :align: center




We might be interested in creating a binary mask from this threshold.



.. code-block:: python


    mask = high.mean().threshold(threshold='95%',binarize=True)
    mask.plot()




.. image:: /auto_examples/01_DataOperations/images/sphx_glr_plot_mask_011.png
    :align: center




We might also want to create separate images from each contiguous ROI.



.. code-block:: python


    region = high.mean().threshold(threshold='95%').regions()
    region.plot()




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/01_DataOperations/images/sphx_glr_plot_mask_012.png
            :scale: 47

    *

      .. image:: /auto_examples/01_DataOperations/images/sphx_glr_plot_mask_013.png
            :scale: 47

    *

      .. image:: /auto_examples/01_DataOperations/images/sphx_glr_plot_mask_014.png
            :scale: 47

    *

      .. image:: /auto_examples/01_DataOperations/images/sphx_glr_plot_mask_015.png
            :scale: 47

    *

      .. image:: /auto_examples/01_DataOperations/images/sphx_glr_plot_mask_016.png
            :scale: 47




**Total running time of the script:** ( 0 minutes  45.097 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_mask.py <plot_mask.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_mask.ipynb <plot_mask.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
