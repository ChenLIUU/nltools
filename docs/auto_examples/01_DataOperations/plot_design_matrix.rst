

.. _sphx_glr_auto_examples_01_DataOperations_plot_design_matrix.py:


Design Matrix Creation
======================

This tutorial illustrates how to use the Design_Matrix class to flexibly create design matrices that can then be used with the Brain_Data class to perform univariate regression. Design Matrices can be thought of as "enhanced" pandas dataframes; they can do everything a pandas dataframe is capable of, with some added features.



Load and Manipulate an Onsets File
-----------------------------------

Nltools provides basic file-reading support for 2 or 3 column formatted onset files.
Users can look at the onsets_to_dm function() as a template to build more complex file readers if desired or to see additional features.
Here we simply point to an onsetfile where each event lasted exactly 1 TR, provide some basic experiment metadata, add an intercept, and get back a basic design matrix.



.. code-block:: python


    from nltools.utils import get_resource_path
    from nltools.file_reader import onsets_to_dm
    from nltools.data import Design_Matrix
    import os


    onsetsFile = os.path.join(get_resource_path(),'onsets_example.txt')
    dm = onsets_to_dm(onsetsFile, TR=2.0, runLength=160, sort=True,
                        addIntercept=True)







The class stores basic meta data including convolution functions (default is glover HRF) and whether convolution has been performed, or whether the model contains a constant term.



.. code-block:: python


    print(dm.info())





.. rst-class:: sphx-glr-script-out

 Out::

    nltools.data.design_matrix.Design_Matrix(sampling_rate=2.0, shape=(160, 14), convolved=None, hasIntercept=True)


We can easily visualize the design matrix too



.. code-block:: python


    dm.heatmap()




.. image:: /auto_examples/01_DataOperations/images/sphx_glr_plot_design_matrix_001.png
    :align: center




We can also add nth order polynomial terms. In this case we'll add a linear term to capture linear trends.
By default the class will add all lower-order polynomials, but is smart enough to realize we already have a constant so it won't be duplicated.



.. code-block:: python


    dmpoly = dm.addpoly(1)
    dmpoly.heatmap()




.. image:: /auto_examples/01_DataOperations/images/sphx_glr_plot_design_matrix_002.png
    :align: center




We can also easily perform convolution and the class is smart enough to ignore all constant and polynomial columns



.. code-block:: python


    dm = dm.convolve()
    print(dm.info())
    dm.heatmap()




.. image:: /auto_examples/01_DataOperations/images/sphx_glr_plot_design_matrix_003.png
    :align: center


.. rst-class:: sphx-glr-script-out

 Out::

    nltools.data.design_matrix.Design_Matrix(sampling_rate=2.0, shape=(160, 14), convolved=['BillyRiggins', 'BuddyGarrity', 'CoachTaylor', 'GrandmaSaracen', 'JasonStreet', 'JulieTaylor', 'LandryClarke', 'LylaGarrity', 'MattSaracen', 'SmashWilliams', 'TamiTaylor', 'TimRiggins', 'TyraCollette'], hasIntercept=True)


Load and Z-score a Covariates File
----------------------------------

Now we're going to handle a covariates file that's been generated by a preprocessing routine.
First we'll read in the text file using pandas and convert it to a design matrix.
To be explicit with the meta-data we're going to change some default attributes during conversion.



.. code-block:: python


    import pandas as pd

    covariatesFile = os.path.join(get_resource_path(),'covariates_example.csv')
    cov = pd.read_csv(covariatesFile)
    cov = Design_Matrix(cov, hasIntercept=False)
    cov.heatmap()




.. image:: /auto_examples/01_DataOperations/images/sphx_glr_plot_design_matrix_004.png
    :align: center




The class has several methods features for basic data scaling and manipulation. Others can likely be found in pandas core functionality.
Here we fill NaN values with 0 and zscore all columns except the last. Because the class has all of pandas functionality, method-chaining is built-in.



.. code-block:: python


    cov = cov.fillna(0).zscore(cov.columns[:-1])
    cov.heatmap()




.. image:: /auto_examples/01_DataOperations/images/sphx_glr_plot_design_matrix_005.png
    :align: center




Concatenate Multiple Design Matrices
------------------------------------

A really nice feature of this class is simplified, but intelligent matrix concatentation. Here it's trivially to horizontally concatenate our convolved onsets and covariates, while keeping our column names and order.



.. code-block:: python


    full = dm.append(cov,axis=1)
    full.heatmap()




.. image:: /auto_examples/01_DataOperations/images/sphx_glr_plot_design_matrix_006.png
    :align: center




But we can also intelligently vertically concatenate design matrices to handle say, different experimental runs, or subjects. The method enables the user to indicate which columns to keep separated during concatenation or which to treat as extensions along the first dimension. By default the class will keep constant terms separated.



.. code-block:: python


    dm2 = dm.append(dm, axis=0, separate=True)
    dm2.heatmap()




.. image:: /auto_examples/01_DataOperations/images/sphx_glr_plot_design_matrix_007.png
    :align: center




But specific columns can also be treated as separate (e.g. separate run spikes, polynomial terms, conditions of interest, etc)
As an example, we treat our first experimental regressor as different across our two design matrices
Notice that the class also preserves (as best as possible) column ordering.



.. code-block:: python


    dm2 = dm.append(dm, axis=0, separate=True, uniqueCols=['BillyRiggins'])
    dm2.heatmap()



.. image:: /auto_examples/01_DataOperations/images/sphx_glr_plot_design_matrix_008.png
    :align: center




**Total running time of the script:** ( 0 minutes  1.743 seconds)



.. only :: html

 .. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_design_matrix.py <plot_design_matrix.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_design_matrix.ipynb <plot_design_matrix.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
