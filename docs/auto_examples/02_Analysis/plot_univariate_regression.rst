

.. _sphx_glr_auto_examples_02_Analysis_plot_univariate_regression.py:


Example of two level univariate regression on simulated data
============================================================

This example simulates data according to a very simple sketch of brain
imaging data and applies a standard two-level univariate GLM to identify
significant voxels.




.. code-block:: python

    #
    # Load Modules

    import glob
    import numpy as np
    import pandas as pd
    import seaborn as sns
    import os
    import sys
    from nltools.simulator import Simulator
    from nltools.utils import get_resource_path, get_anatomical
    from nltools.analysis import Roc
    from nltools.data import Brain_Data
    from nltools.stats import threshold
    from nltools.mask import create_sphere
    import matplotlib.pyplot as plt
    import shutil
    import tempfile

    tmp_dir = os.path.join(tempfile.gettempdir(), str(os.times()[-1]))







Create data



.. code-block:: python


    sim = Simulator()
    r=10
    sigma = .5
    cor = .8
    cov = .6
    n_trials = 10
    n_subs = 5
    s1 = create_sphere([41, 64, 55], radius=r)
    sim.create_cov_data(cor, cov, sigma, mask=s1, reps = n_trials, n_sub = n_subs, output_dir = tmp_dir)





.. rst-class:: sphx-glr-script-out

 Out::

    [[-1.1908329  -1.86573078 -1.65476838 ..., -1.01874724 -1.06064644
       0.72325285]
     [ 0.89756306  1.32567222  1.52809755 ..., -0.12107931 -1.03886769
       0.21810485]
     [ 0.50401599  0.43134712  1.81187666 ...,  0.10716785  0.62083955
       1.17947493]
     ..., 
     [ 0.15889919  0.00314724  0.68917494 ...,  0.01431749  0.0384763
       0.54305025]
     [-1.61129691 -1.33259274 -1.34388575 ..., -1.80790805 -1.7367355
      -2.00761851]
     [ 0.31520607  1.47059801 -0.51871142 ...,  1.55917027  0.11375568
       0.31478207]]


Load data



.. code-block:: python


    y=pd.read_csv(os.path.join(tmp_dir,'y.csv'),header=None,index_col=None).T
    dat = Brain_Data(data=os.path.join(tmp_dir,'maskdata_cor0.8_cov0.6_sigma0.5.nii.gz'),Y=y)
    dat.X = pd.DataFrame({'Intercept':np.ones(len(dat.Y)),'X1':np.array(dat.Y).flatten()},index=None)
    holdout = pd.read_csv(os.path.join(tmp_dir,'rep_id.csv'),header=None,index_col=None).T







Run Regression separately for each subject



.. code-block:: python


    start = 0
    stop = n_trials
    dat.X = pd.DataFrame({'Intercept':np.ones(len(dat.Y)),'X1':np.array(dat.Y).flatten()},index=None)
    all = dat.empty()
    for i in xrange(n_subs):
        sub_out = dat[start:stop].regress()
        start = start + n_trials
        stop = stop + n_trials
        tmp = sub_out['beta'].empty(data=False)[1]
        all = all.append(tmp)







Run One sample t-test



.. code-block:: python


    l2 = all.ttest(threshold_dict={'fdr':.05})
    l2['thr_t'].plot()

    shutil.rmtree(tmp_dir, ignore_errors=True) # Delete Data



.. image:: /auto_examples/02_Analysis/images/sphx_glr_plot_univariate_regression_001.png
    :align: center




**Total running time of the script:** ( 0 minutes  29.723 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_univariate_regression.py <plot_univariate_regression.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_univariate_regression.ipynb <plot_univariate_regression.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
